<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>mall</artifactId>
        <groupId>com.github</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <!--<packaging>war</packaging>-->
    <artifactId>web-backend</artifactId>
    <description>给 小程序、h5 提供接口调用的服务</description>

    <dependencies>
        <dependency>
            <groupId>com.github.liuanxin</groupId>
            <artifactId>api-document</artifactId>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>mall-common</artifactId>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>mall-global</artifactId>
        </dependency>

        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>common-server</artifactId>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>user-server</artifactId>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>product-server</artifactId>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>order-server</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>

        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>-->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
        </dependency>
        <!-- 将 session 存到 redis 中, 这样应用重启后 session 也还有效 -->
        <!--<dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>-->
    </dependencies>

    <build>
        <finalName>web-backend-8686</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <configuration>
                    <allowInsecureRegistries>true</allowInsecureRegistries>
                    <from>
                        <image>openjdk:17-alpine</image>
                        <!--<auth>
                            <username>xx</username>
                            <password>xx</password>
                        </auth>-->
                    </from>
                    <!--
                    docker_image="ip:port/$(git branch - -show-current)/项目名-$(date '+%Y-%m-%d-%H-%M-%S')-$(git log - -format=format:'%H' | head -n 1)"
                    mvn clean compile jib:build -Djib.to.image=${docker_image}

                    最终推到 docker 私服的 "分支名/项目名-年-月-日-时-分-秒-sha" 上
                    -->
                    <to>
                        <image>${docker-repository}/${project.groupId}/${project.artifactId}-${project.version}</image>
                        <!--<auth>
                            <username>xxx</username>
                            <password>xxx</password>
                        </auth>-->
                    </to>
                    <container>
                        <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                        <!--<jvmFlags>
                            <jvmFlag>-server</jvmFlag>
                            <jvmFlag>-Dfile.encoding=UTF-8</jvmFlag>
                            <jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
                            <jvmFlag>-verbose:gc</jvmFlag>
                            <jvmFlag>-XX:+PrintGCDetails</jvmFlag>
                            <jvmFlag>-XX:+PrintGCDateStamps</jvmFlag>
                            <jvmFlag>-XX:+PrintGCTimeStamps</jvmFlag>
                            <jvmFlag>-Xloggc:/var/log/gc.log</jvmFlag>
                        </jvmFlags>-->
                        <entrypoint>
                            <arg>/bin/sh</arg>
                            <arg>-c</arg>
                            <arg>
                                exec java $JAVA_OPTS \
                                -server -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/./urandom \
                                -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps \
                                -Xloggc:/var/log/gc.log \
                                -cp $( cat /app/jib-classpath-file ) \
                                $( cat /app/jib-main-class-file )
                            </arg>

                            <!--<arg>
                                exec java $JAVA_OPTS \
                                -server -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/./urandom \
                                -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps \
                                -Xloggc:/var/log/gc.log \
                                -cp /app/resources:/app/classes:/app/libs/* \
                                ${main-class}
                            </arg>-->
                        </entrypoint>
                    </container>
                </configuration>
                <!--
                编译时上传到 docker 私服: mvn clean compile -DsendCredentialsOverHttp=true jib:build
                私服支持 https 可以去掉 -DsendCredentialsOverHttp=true 选项, 要去掉 jib:build 选项可以解开下面的配置
                -->
                <!--<executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>-->
            </plugin>
        </plugins>
    </build>
</project>
